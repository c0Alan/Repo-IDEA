
spring:
  devtools:
    restart:
      additional-paths: src/main/*
  thymeleaf:
    cache: false
  boot:
    admin:
      client:
        # 指定admin-server的地址
        url: http://192.168.50.133:9013
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver      # 配置MySQL的驱动程序类
    url: jdbc:mysql://${mysql.server}/${mysql.dbName}?useUnicode=true&characterEncoding=utf8&useSSL=false&allowMultiQueries=true           # 数据库连接地址
    username: ${mysql.username}
    password: ${mysql.password}

  kafka:
    bootstrap-servers: ${kafka.server} #这个是kafka的地址,对应你server.properties中配置的
    listener:
      missing-topics-fatal: false # consumer listener topics 不存在时，启动项目就会报错
      type: batch #设置批量消费
      concurrency: 1
    producer:
      batch-size: 16384 #批量大小
      acks: -1 #应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      retries: 10 # 消息发送重试次数
      #      transaction-id-prefix:  tx_1 #事务id前缀
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        linger:
          ms: 2000 #提交延迟
    #        partitioner: #指定分区器
    #          class: com.example.kafkademo.config.CustomizePartitioner
    consumer:
      group-id: testGroup #默认的消费组ID
      enable-auto-commit: true #是否自动提交offset
      auto-commit-interval: 2000 #提交offset延时
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
      # earliest:重置为分区中最小的offset;
      # latest:重置为分区中最新的offset(消费分区中新产生的数据);
      # none:只要有一个分区不存在已提交的offset,就抛出异常;
      auto-offset-reset: latest
      max-poll-records: 500 #单次拉取消息的最大条数
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        session:
          timeout:
            ms: 120000 # 消费会话超时时间（超过这个时间 consumer 没有发送心跳，就会触发 rebalance 操作）
        request:
          timeout:
            ms: 18000 # 消费请求的超时时间


  mail:
    host: smtp.qq.com
    username: xxx@qq.com
    password: xxx
    sendTo: xxx@qq.com
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
    default-encoding: UTF-8


# 整合knife4j, 参考: https://blog.csdn.net/ZhangXS9722/article/details/136906546
knife4j:
  enable: true
  openapi:
    title: sch-springboot
    description: "sch-springboot"
    email: ""
    concat: admin
    url: https://docs.xiaominfo.com
    version: v1.0
    license: Apache 2.0
    license-url: https://stackoverflow.com/
    terms-of-service-url: https://stackoverflow.com/

#    group:
#      sch-springboot:
#        group-name: sch-springboot
#        api-rule: package
#        api-rule-resources:
#          - com.demo.springcloud


# 暴露监控端点
management:
  endpoints:
    web:
      exposure:
        # 配置需要暴露出去的端点，一般直接*暴露全部就行
        include: "*"
      # 这是监控的默认根路径，支持自定义
#      base-path: /observe
  endpoint:
    health:
      # health 默认只展示 是否在线，增加该配置后会展示更多信息
      show-details: ALWAYS
    shutdown:
      # 启用关闭应用的功能，不启用则无法关闭应用
      enabled: true
  info:
    env:
      # 开启info端点的配置支持，即使配置了info也无信息
      enabled: true
  health:
    mail:
      enabled: false
# 自定以info端点信息，info端点获取的就是这里的信息
info:
  title: ${spring.application.name}服务
  version: ${spring.application.name}-${spring.application.version}
  description: ${spring.application.name}服务监控

mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    auto-mapping-behavior: full
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: classpath*:mapper/*Mapper.xml
  global-config:
    # 逻辑删除配置
    db-config:
      # 删除前
      logic-not-delete-value: 1
      # 删除后
      logic-delete-value: 0

minio:
  bucketName: bucket-sch

app:
  test:
    users:
      - id: 1
        username: aaa
      - id: 2
        username: bbb

myframe:
  user:
    name: tom
    age: 29
    address: 广东广州天河
    uuid: ${random.uuid}
    desc: ${myframe.user.name} is ${myframe.user.age} years old
    date: 2018/09/20
    hobbys: 打球,写代码
    maps: "{key1: 'value1', key2: 'value2'}"

spring.profiles.active: profile2
---
spring.profiles: profile1
myframe:
  preuser:
    name: profile1
    age: 29
    address: 广东广州天河[dev]
    uuid: ${random.uuid}
    desc: ${myframe.user.name} is ${myframe.user.age} years old
    date: 2018/09/20
    hobby[0]: 打球[dev]
    hobby[1]: 写代码[dev]
    friends:
      - name: tom
        age: 20
      - name: may
        age: 30
    brother:
      tom: 10
      lili: 11

---
spring.profiles: profile2
myframe:
  preuser:
    name: profile2
    age: 29
    address: 广东广州天河[dev]
    uuid: ${random.uuid}
    desc: ${myframe.user.name} is ${myframe.user.age} years old
    date: 2018/09/20
    hobby[0]: 打球[dev]
    hobby[1]: 写代码[dev]
    friends:
      - name: tom
        age: 20
      - name: may
        age: 30
    brother:
      tom: 10
      lili: 11