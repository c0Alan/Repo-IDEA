<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <display-name>web test</display-name>

    <!-- **************************** page **************************** -->
    <welcome-file-list>
        <!--        <welcome-file>index.jsp</welcome-file>-->
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    <!-- 针对404错误的处理页面 -->
    <error-page>
        <error-code>404</error-code>
        <location>/error/404Error.jsp</location>
    </error-page>

    <!-- 针对500错误的处理页面 -->
    <error-page>
          <error-code>500</error-code>
          <location>/error/500Error.jsp</location>
    </error-page>

    <!-- **************************** context-param **************************** -->
    <!-- 配置WEB应用的初始化参数 -->
    <context-param>
        <param-name>url</param-name>
        <param-value>jdbc:mysql://localhost:3306/test</param-value>
    </context-param>


    <!-- **************************** session **************************** -->
    <!-- 配置HttpSession对象的销毁时机 -->
    <session-config>
        <!--配置HttpSession对象的1分钟之后销毁 -->
        <session-timeout>1</session-timeout>
    </session-config>

    <!-- **************************** servlet **************************** -->
    <servlet>
        <servlet-name>ServletDemo01</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletDemo01</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletDemo01</servlet-name>
        <url-pattern>/servlet/ServletDemo01</url-pattern>
    </servlet-mapping>


    <servlet>
        <servlet-name>ServletDemo02</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletDemo02</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletDemo02</servlet-name>
        <url-pattern>/servlet/ServletDemo02</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletDemo03</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletDemo03</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletDemo03</servlet-name>
        <url-pattern>/servlet/ServletDemo03</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletDemo04</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletDemo04</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletDemo04</servlet-name>
        <url-pattern>/servlet/ServletDemo04</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletDemo05</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletDemo05</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletDemo05</servlet-name>
        <url-pattern>/servlet/ServletDemo05</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletDemo1</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletDemo1</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletDemo1</servlet-name>
        <url-pattern>/servlet/ServletDemo1</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>ServletDemo1</servlet-name>
        <url-pattern>/1.htm</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletDemo2</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletDemo2</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletDemo2</servlet-name>
        <url-pattern>/servlet/ServletDemo2</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletDemo3</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletDemo3</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletDemo3</servlet-name>
        <url-pattern>/servlet/ServletDemo3</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletConfigDemo1</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletConfigDemo1</servlet-class>
        <!--配置ServletConfigDemo1的初始化参数 -->
        <init-param>
            <param-name>name</param-name>
            <param-value>gacl</param-value>
        </init-param>
        <init-param>
            <param-name>password</param-name>
            <param-value>123</param-value>
        </init-param>
        <init-param>
            <param-name>charset</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletConfigDemo1</servlet-name>
        <url-pattern>/servlet/ServletConfigDemo1</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletContextDemo1</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletContextDemo1</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletContextDemo1</servlet-name>
        <url-pattern>/servlet/ServletContextDemo1</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletContextDemo2</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletContextDemo2</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletContextDemo2</servlet-name>
        <url-pattern>/servlet/ServletContextDemo2</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletContextDemo3</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletContextDemo3</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletContextDemo3</servlet-name>
        <url-pattern>/servlet/ServletContextDemo3</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletContextDemo4</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletContextDemo4</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletContextDemo4</servlet-name>
        <url-pattern>/servlet/ServletContextDemo4</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletContextDemo5</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletContextDemo5</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletContextDemo5</servlet-name>
        <url-pattern>/servlet/ServletContextDemo5</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletContextDemo6</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletContextDemo6</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletContextDemo6</servlet-name>
        <url-pattern>/servlet/ServletContextDemo6</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletDemo5</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletDemo5</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletDemo5</servlet-name>
        <url-pattern>/servlet/ServletDemo5</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ServletContextDemo7</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ServletContextDemo7</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletContextDemo7</servlet-name>
        <url-pattern>/servlet/ServletContextDemo7</url-pattern>
    </servlet-mapping>

    <!--response 部分-->
    <servlet>
        <servlet-name>ResponseDemo01</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ResponseDemo01</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ResponseDemo01</servlet-name>
        <url-pattern>/servlet/ResponseDemo01</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ResponseDemo02</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ResponseDemo02</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ResponseDemo02</servlet-name>
        <url-pattern>/servlet/ResponseDemo02</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ResponseDemo03</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ResponseDemo03</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ResponseDemo03</servlet-name>
        <url-pattern>/servlet/ResponseDemo03</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>ResponseDemo04</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ResponseDemo04</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ResponseDemo04</servlet-name>
        <url-pattern>/servlet/ResponseDemo04</url-pattern>
    </servlet-mapping>

    <!--验证码-->
    <servlet>
        <servlet-name>DrawImage</servlet-name>
        <servlet-class>com.demo.java.web.servlet.DrawImage</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DrawImage</servlet-name>
        <url-pattern>/servlet/DrawImage</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>CheckServlet</servlet-name>
        <servlet-class>com.demo.java.web.servlet.CheckServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>CheckServlet</servlet-name>
        <url-pattern>/servlet/CheckServlet</url-pattern>
    </servlet-mapping>

    <!--request 部分-->
    <servlet>
        <servlet-name>RequestDemo01</servlet-name>
        <servlet-class>com.demo.java.web.servlet.RequestDemo01</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>RequestDemo01</servlet-name>
        <url-pattern>/servlet/RequestDemo01</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>RequestDemo02</servlet-name>
        <servlet-class>com.demo.java.web.servlet.RequestDemo02</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>RequestDemo02</servlet-name>
        <url-pattern>/servlet/RequestDemo02</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>RequestDemo03</servlet-name>
        <servlet-class>com.demo.java.web.servlet.RequestDemo03</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>RequestDemo03</servlet-name>
        <url-pattern>/servlet/RequestDemo03</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>RequestDemo04</servlet-name>
        <servlet-class>com.demo.java.web.servlet.RequestDemo04</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>RequestDemo04</servlet-name>
        <url-pattern>/servlet/RequestDemo04</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>RequestDemo06</servlet-name>
        <servlet-class>com.demo.java.web.servlet.RequestDemo06</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>RequestDemo06</servlet-name>
        <url-pattern>/servlet/RequestDemo06</url-pattern>
    </servlet-mapping>

    <!--cookie-->
    <servlet>
        <servlet-name>CookieDemo01</servlet-name>
        <servlet-class>com.demo.java.web.servlet.CookieDemo01</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>CookieDemo01</servlet-name>
        <url-pattern>/servlet/CookieDemo01</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>CookieDemo02</servlet-name>
        <servlet-class>com.demo.java.web.servlet.CookieDemo02</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>CookieDemo02</servlet-name>
        <url-pattern>/servlet/CookieDemo02</url-pattern>
    </servlet-mapping>

    <!-- session -->
    <servlet>
        <servlet-name>SessionDemo1</servlet-name>
        <servlet-class>com.demo.java.web.servlet.SessionDemo1</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>SessionDemo1</servlet-name>
        <url-pattern>/servlet/SessionDemo1</url-pattern>
    </servlet-mapping>
    <!-- 表单重复提交解决方案 -->
    <servlet>
        <servlet-name>DoFormServlet</servlet-name>
        <servlet-class>com.demo.java.web.servlet.DoFormServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DoFormServlet</servlet-name>
        <url-pattern>/servlet/DoFormServlet</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>FormServlet</servlet-name>
        <servlet-class>com.demo.java.web.servlet.FormServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>FormServlet</servlet-name>
        <url-pattern>/servlet/FormServlet</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>DoFormServlet2</servlet-name>
        <servlet-class>com.demo.java.web.servlet.DoFormServlet2</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DoFormServlet2</servlet-name>
        <url-pattern>/servlet/DoFormServlet2</url-pattern>
    </servlet-mapping>


    <!-- 模拟springmvc实现 -->
    <servlet>
        <servlet-name>AnnotationHandleServlet</servlet-name>
        <servlet-class>com.demo.java.web.servlet.AnnotationHandleServlet</servlet-class>
        <init-param>
            <description>配置要扫描包及其子包, 如果有多个包,以逗号分隔</description>
            <param-name>basePackage</param-name>
            <!--            <param-value>me.gacl.web.controller,me.gacl.web.UI</param-value>-->
            <param-value>com.demo.java.web.controller</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>AnnotationHandleServlet</servlet-name>
        <!-- 拦截所有以.do后缀结尾的请求 -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

    <!-- 文件上传下载 -->
    <servlet>
        <servlet-name>UploadHandleServlet</servlet-name>
        <servlet-class>com.demo.java.web.servlet.UploadHandleServlet2</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>UploadHandleServlet</servlet-name>
        <url-pattern>/servlet/UploadHandleServlet</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ListFileServlet</servlet-name>
        <servlet-class>com.demo.java.web.servlet.ListFileServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ListFileServlet</servlet-name>
        <url-pattern>/servlet/ListFileServlet</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>DownLoadServlet</servlet-name>
        <servlet-class>com.demo.java.web.servlet.DownLoadServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DownLoadServlet</servlet-name>
        <url-pattern>/servlet/DownLoadServlet</url-pattern>
    </servlet-mapping>


    <!-- JNDI 数据库连接池 -->
    <servlet>
        <servlet-name>DataSourceJNDIServlet</servlet-name>
        <servlet-class>com.demo.java.web.jdbc.DataSourceJNDIServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DataSourceJNDIServlet</servlet-name>
        <url-pattern>/jdbc/JNDIServlet</url-pattern>
    </servlet-mapping>

    <!-- 模拟 controller、service、dao 三层访问链路及事务回滚 -->
    <servlet>
        <servlet-name>AccountServlet</servlet-name>
        <servlet-class>com.demo.java.web.jdbc.dbutils.AccountServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>AccountServlet</servlet-name>
        <url-pattern>/jdbc/AccountServlet</url-pattern>
    </servlet-mapping>

    <filter>
        <filter-name>TransactionFilter</filter-name>
        <filter-class>com.demo.java.web.jdbc.dbutils.TransactionFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>TransactionFilter</filter-name>
        <url-pattern>/jdbc/*</url-pattern>
    </filter-mapping>

    <!-- **************************** filter **************************** -->
    <!--配置过滤器-->
    <filter>
        <filter-name>FilterDemo01</filter-name>
        <filter-class>com.demo.java.web.filter.FilterDemo01</filter-class>
    </filter>

    <!--映射过滤器-->
    <filter-mapping>
        <filter-name>FilterDemo01</filter-name>
        <!--“/*”表示拦截所有的请求 -->
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <description>FilterDemo02过滤器</description>
        <filter-name>FilterDemo02</filter-name>
        <filter-class>com.demo.java.web.filter.FilterDemo02</filter-class>
        <!--配置FilterDemo02过滤器的初始化参数-->
        <init-param>
            <description>配置FilterDemo02过滤器的初始化参数</description>
            <param-name>name</param-name>
            <param-value>filter02</param-value>
        </init-param>
        <init-param>
            <description>配置FilterDemo02过滤器的初始化参数</description>
            <param-name>like</param-name>
            <param-value>java</param-value>
        </init-param>
    </filter>

    <!--映射过滤器-->
    <filter-mapping>
        <filter-name>FilterDemo02</filter-name>
        <!--“/*”表示拦截所有的请求 -->
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--    <filter-mapping>
            <filter-name>testFilter</filter-name>
            <url-pattern>/index.jsp</url-pattern>
            <dispatcher>REQUEST</dispatcher>
            <dispatcher>FORWARD</dispatcher>
        </filter-mapping>-->

    <!--
    REQUEST：当用户直接访问页面时，Web容器将会调用过滤器。
    如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。

    INCLUDE：如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。
    除此之外，该过滤器不会被调用。

    FORWARD：如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，
    除此之外，该过滤器不会被调用。

    ERROR：如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。
    除此之外，过滤器不会被调用。
    -->


    <!--配置Html过滤器，转义内容中的html标签-->
    <filter>
        <filter-name>HtmlFilter</filter-name>
        <filter-class>com.demo.java.web.filter.HtmlFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>HtmlFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!--配置敏感字符过滤器-->
    <filter>
        <filter-name>DirtyFilter</filter-name>
        <filter-class>com.demo.java.web.filter.DirtyFilter</filter-class>
        <!-- 配置要过滤的敏感字符文件 -->
        <init-param>
            <param-name>dirtyWord</param-name>
            <param-value>/WEB-INF/DirtyWord.txt</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>DirtyFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 编码过滤器, 这里开起来会导致乱码 -->
    <!--<filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>com.demo.java.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>charset</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>-->

    <!-- 编码&敏感词&html过滤器组合 -->
    <!--<filter>
        <filter-name>AdvancedFilter</filter-name>
        <filter-class>com.demo.java.web.filter.AdvancedFilter</filter-class>
        <init-param>
            <param-name>charset</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>dirtyWord</param-name>
            <param-value>/WEB-INF/DirtyWord.txt</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>AdvancedFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>-->

    <!-- response 过滤器部分 -->
    <filter>
        <description>配置压缩过滤器</description>
        <filter-name>GzipFilter</filter-name>
        <filter-class>com.demo.java.web.filter.GzipFilter</filter-class>
    </filter>

    <!-- jsp文件的输出的内容都经过压缩过滤器压缩后才输出,这里会导致页面显示内容不能正常展示, 因为是为压缩内容 -->
    <!--<filter-mapping>
        <filter-name>GzipFilter</filter-name>
        <url-pattern>*.jsp</url-pattern>
        &lt;!&ndash; 配置过滤器的拦截方式&ndash;&gt;
        &lt;!&ndash; 对于在Servlet中通过
            request.getRequestDispatcher("jsp页面路径").forward(request, response)
        方式访问的Jsp页面的要进行拦截 &ndash;&gt;
        <dispatcher>FORWARD</dispatcher>
        &lt;!&ndash;对于直接以URL方式访问的jsp页面进行拦截，过滤器的拦截方式默认就是 REQUEST&ndash;&gt;
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>-->
    <!--js文件的输出的内容都经过压缩过滤器压缩后才输出 -->
    <filter-mapping>
        <filter-name>GzipFilter</filter-name>
        <url-pattern>*.js</url-pattern>
    </filter-mapping>
    <!--css文件的输出的内容都经过压缩过滤器压缩后才输出 -->
    <filter-mapping>
        <filter-name>GzipFilter</filter-name>
        <url-pattern>*.css</url-pattern>
    </filter-mapping>
    <!--html文件的输出的内容都经过压缩过滤器压缩后才输出 -->
    <filter-mapping>
        <filter-name>GzipFilter</filter-name>
        <url-pattern>*.html</url-pattern>
    </filter-mapping>

    <filter>
        <description>Web资源缓存过滤器</description>
        <filter-name>WebResourceCachedFilter</filter-name>
        <filter-class>com.demo.java.web.filter.WebResourceCachedFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>WebResourceCachedFilter</filter-name>
        <!-- 映射需要缓存输出的JSP页面，这几个页面都只是单纯作为输入UI，不会有太多的变化，因此可以缓存输出 -->
        <url-pattern>/login.jsp</url-pattern>
        <url-pattern>/test.jsp</url-pattern>
        <url-pattern>/test2.jsp</url-pattern>
    </filter-mapping>

    <!--<filter>
        <filter-name>NoCacheFilter</filter-name>
        <filter-class>com.demo.java.web.filter.NoCacheFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>NoCacheFilter</filter-name>
        &lt;!&ndash;只拦截Jsp请求&ndash;&gt;
        <servlet-name>*.jsp</servlet-name>
    </filter-mapping>-->

    <!-- 配置缓存过滤器 -->
    <filter>
        <filter-name>CacheFilter</filter-name>
        <filter-class>com.demo.java.web.filter.CacheFilter</filter-class>
        <!-- 配置要缓存的web资源以及缓存时间，以小时为单位 -->
        <init-param>
            <param-name>css</param-name>
            <param-value>4</param-value>
        </init-param>
        <init-param>
            <param-name>jpg</param-name>
            <param-value>1</param-value>
        </init-param>
        <init-param>
            <param-name>js</param-name>
            <param-value>4</param-value>
        </init-param>
        <init-param>
            <param-name>png</param-name>
            <param-value>4</param-value>
        </init-param>
    </filter>
    <!-- 配置要缓存的web资源的后缀-->
    <filter-mapping>
        <filter-name>CacheFilter</filter-name>
        <url-pattern>*.jpg</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>CacheFilter</filter-name>
        <url-pattern>*.css</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>CacheFilter</filter-name>
        <url-pattern>*.js</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>CacheFilter</filter-name>
        <url-pattern>*.png</url-pattern>
    </filter-mapping>

    <!-- 通过自定义 @WebServlet 注解，模拟实现 Servlet 的功能 -->
    <filter>
        <description>注解处理过滤器</description>
        <filter-name>AnnotationHandleFilter</filter-name>
        <filter-class>com.demo.java.web.filter.AnnotationHandleFilter</filter-class>
        <init-param>
            <description>配置要扫描包及其子包, 如果有多个包,以逗号分隔</description>
            <param-name>basePackage</param-name>
            <param-value>com.demo.java.web.controller,com.demo.java.web.UI</param-value>
            <!-- <param-value>me.gacl.web.controller</param-value> -->
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>AnnotationHandleFilter</filter-name>
        <!-- 拦截后缀是.do的请求 -->
        <url-pattern>*.do</url-pattern>
    </filter-mapping>

    <!-- **************************** listener **************************** -->
    <!-- 注册针对ServletContext对象进行监听的监听器 -->
    <listener>
        <description>ServletContextListener监听器</description>
        <!--实现了ServletContextListener接口的监听器类 -->
        <listener-class>com.demo.java.web.listener.MyServletContextListener</listener-class>
    </listener>

    <!--注册针对HttpSession对象进行监听的监听器-->
    <listener>
        <description>HttpSessionListener监听器</description>
        <listener-class>com.demo.java.web.listener.MyHttpSessionListener</listener-class>
    </listener>

    <!--注册针对ServletRequest对象进行监听的监听器-->
    <listener>
        <description>ServletRequestListener监听器</description>
        <listener-class>com.demo.java.web.listener.MyServletRequestListener</listener-class>
    </listener>

    <listener>
        <description>MyServletContextAttributeListener监听器</description>
        <listener-class>com.demo.java.web.listener.MyServletContextAttributeListener</listener-class>
    </listener>

    <listener>
        <description>MyRequestAndSessionAttributeListener监听器</description>
        <listener-class>com.demo.java.web.listener.MyRequestAndSessionAttributeListener</listener-class>
    </listener>

</web-app>